% CC between pseu_mats (+ syna_mat)

clear all
close all
fclose('all');

% *********************************
% *** Parameters for simulation ***
% *********************************
strEnv = {'stim100' 'addstdp' 'mltstdp' 'stim050' 'stim060' 'stim070' 'stim080' 'stim090'};
strData =  {'50[Hz]' '100[Hz]' '200[Hz]' '0.3[-]' '0.5[-]' '0.7[-]'};
strTest =  {'1,000[msec](same)' '2,000[msec](same)' '4,000[msec](same)'...
			'1,000[msec](diff)' '2,000[msec](diff)' '4,000[msec](diff)'...
			'wo-learning' 'wo-input mod' ' wo-learning & input mod'};
strCmp = {'02' '04' '06' '08' '10' '12' '14' '16' '18' '20'};
strTrl = {'01' '02' '03' '04' '05' '06' '07' '08' '09' '10'};

pltEnv  = 1;	%Simulation environment
pltData = [1:6];	%Data number
pltTest = 1:1;  %Data-test number
pltCmp  = 5:5;  %Sequence compression ratio
pltTrl  = 1:10; %After learning trial number

STIM_TIME = 500;
ID_G1 = 1:100;
ID_G2 = 101:200;
ID_OTHER = 201:400;
NUM_EXC = 400;

data_dir = '/Users/matsu/Research/LogSTDP';
working_dir = '/Users/matsu/Documents/MATLAB/LogSTDP';
% ********************
% *** Main routine ***
% ********************
for i = pltEnv
	for j = pltData
			for k = pltTest
			% Load synapse data
			load_path = sprintf('%s/DataBase/%s/Data%d/Test0%d/synapse.mat',working_dir,strEnv{i},j,k);
			load(load_path);
			for l = pltCmp
				clear ps
				for m = pltTrl
					% Load seqdata
					load_dir = sprintf('%s/mod-code-longstim02-%s/data%d/data-test0%d',data_dir,strEnv{i},j,k);
					seqdata_syna = load(sprintf('%s/sequences%s-c%s.appear.syna',load_dir,strTrl{m},strCmp{l}));
					pseu_mat  = reshape(seqdata_syna(:,3),NUM_EXC,NUM_EXC);
					row = 3;
					clm = 3;
					for n = 1:clm
						switch n
						case 1; idPre = ID_G1;
						case 2; idPre = ID_G2;
						case 3; idPre = ID_OTHER;
						end
						for o = 1:row
							switch o
							case 1; idPost = ID_G1;
							case 2; idPost = ID_G2;
							case 3; idPost = ID_OTHER;
							end
							idx = sub2ind([row clm],o,n);
							eval(sprintf('syna_block%d = syna_mat(idPost,idPre);',idx));
							eval(sprintf('pseu_block%d = pseu_mat(idPost,idPre);',idx));
							eval(sprintf('ps%d(:,m) = reshape(pseu_block%d,[],1);',idx,idx));
							eval(sprintf('ps%d(:,m) = (ps%d(:,m)-mean(ps%d(:,m)))/std(ps%d(:,m));',idx,idx,idx,idx));
						end
					end
					fprintf('For loop have finished until trial %d\n',m);
				end %for m : trial
				for n = 1:3
					for o = 1:3
						idx = sub2ind([row clm],o,n);
						tail = size(pltTrl,2)+1;
						eval(sprintf('ps%d(:,tail) = reshape(syna_block%d,[],1);',idx,idx));
						eval(sprintf('ps%d(:,tail) = (ps%d(:,tail)-mean(ps%d(:,tail)))/std(ps%d(:,tail));',idx,idx,idx,idx));
					end
				end
				figure
				set(gcf,'Name',sprintf('%s-%s-%s-CompRatio=%s-Trial=%s',strEnv{i},strData{j},strTest{k},strCmp{l},strTrl{m}))
				for n = 1:3
					for o = 1:3
						idx = sub2ind([row clm],o,n);
						eval(sprintf('ps = ps%d;',idx)); 
						subplot(row,clm,sub2ind([row clm],n,o))
						cc = corrcoef(ps);
						imagesc(cc)
						caxis([-1 1])
						synaVSpseu(idx,1) = mean(cc(1:size(pltTrl,2),tail));
						synaVSpseu(idx,2) = std(cc(1:size(pltTrl,2),tail));
					end
				end
				subplot(row,clm,2)
				title(sprintf('%s-%s-%s-CompRatio=%s-Trial=%s',strEnv{i},strData{j},strTest{k},strCmp{l},strTrl{m}))
				figure
				errorbar(synaVSpseu(:,1),synaVSpseu(:,2))
				title(sprintf('%s-%s-%s-CompRatio=%s',strEnv{i},strData{j},strTest{k},strCmp{l}))
				fprintf('For loop have finished until cmp=%d\n',l);
			end %for l : comprassion ratio
			fprintf('For loop have finished until test0%d\n',k);
		end %for k : data-test
		fprintf('For loop have finished until data%d\n',j);
	end %for j : data
	fprintf('For loop have finished until simu env%d\n',i);
end	%for i : simulation environment
