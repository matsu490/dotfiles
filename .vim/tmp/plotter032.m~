% RSS identifier & ISI from head to head

clear all
close all
fclose('all');

% *********************************
% *** Parameters for simulation ***
% *********************************
strEnv = {'stim100' 'addstdp' 'mltstdp' 'stim050' 'stim060' 'stim070' 'stim080' 'stim090'};
strData =  {'50[Hz]' '100[Hz]' '200[Hz]' '0.3[-]' '0.5[-]' '0.7[-]'};
strTest =  {'1,000[msec](same)' '2,000[msec](same)' '4,000[msec](same)'...
			'1,000[msec](diff)' '2,000[msec](diff)' '4,000[msec](diff)'...
			'wo-learning' 'wo-input mod' ' wo-learning & input mod'};
strCmp = {'02' '04' '06' '08' '10' '12' '14' '16' '18' '20'};
strTrl = {'01' '02' '03' '04' '05' '06' '07' '08' '09' '10'};

pltEnv  = 1;	%Simulation environment
pltData = [1:6];	%Data number
pltTest = 1:9;  %Data-test number
pltCmp  = 5:5;  %Sequence compression ratio
pltTrl  = 1:10; %After learning trial number

STIM_TIME = 500;
ID_G1 = 1:100;
ID_G2 = 101:200;
ID_OTHER = 201:400;
NUM_EXC = 400;

data_dir = '/Users/matsu/Research/LogSTDP';
working_dir = '/Users/matsu/Documents/MATLAB/LogSTDP';
% ********************
% *** Main routine ***
% ********************
for i = pltEnv
	for j = pltData
		for k = pltTest
			for l = pltCmp
				for m = pltTrl
					% Load seqdata
					load_dir = sprintf('%s/mod-code-longstim02-%s/data%d/data-test0%d',data_dir,strEnv{i},j,k);
					espk = load(sprintf('%s/espk.%s',load_dir,strTrl{m}));
					seqdata = load(sprintf('%s/sequences%s-c%s',load_dir,strTrl{m},strCmp{l}));
					seqdata_cell = load(sprintf('%s/sequences%s-c%s.appear.cell',load_dir,strTrl{m},strCmp{l}));
					seqdata_syna = load(sprintf('%s/sequences%s-c%s.appear.syna',load_dir,strTrl{m},strCmp{l}));
					seqdata_length = load(sprintf('%s/sequences%s-c%s.length',load_dir,strTrl{m},strCmp{l}));

					seqdata = f_classify(seqdata);
					seqdata = f_RSSIdentifier(seqdata,seqdata_length);

%					idHead = find(seqdata(:,3)==1);
%					idSA = idHead(find(seqdata(idHead,1)<=1000));
%					idEA = idHead(find(seqdata(idHead,1)>=1000));
%					seqdata(:,4) = 0;
%					seqdata(idSA,4) = 1;
%					seqdata(idEA,4) = 2;

%					idHead = find(seqdata(:,3)==1);
%					idSA = idHead(find(seqdata(idHead,1)<=1000));
%					idEA = idHead(find(seqdata(idHead,1)>=1000));
%					idSA2 = find(seqdata(idHead,1)<=1000);
%					idEA2 = find(seqdata(idHead,1)>=1000);
%					SeqLenSA = seqdata_length(idSA2,:);
%					SeqLenEA = seqdata_length(idEA2,:);
%					seqdata(:,5) = 0;
%					seqdata_length(:,3) = 0;
%					IsiHtoH = 0;
%					for n = 1:size(SeqLenSA,1)
%						Combo = SeqLenSA(n,2);
%						idSeqH_SA = idSA(n,1);
%						idSeqT_SA = idSA(n,1)+Combo-1;
%						NeuIdSA = seqdata(idSeqH_SA:idSeqT_SA,2);
%						IsiSA = diff(seqdata(idSeqH_SA:idSeqT_SA,1));
%						vecSA = [NeuIdSA; IsiSA];
%
%						idCand = find(SeqLenEA(:,1)==SeqLenSA(n,1) & SeqLenEA(:,2)==SeqLenSA(n,2));
%						cent = 0;
%						for o = 1:size(idCand,1)
%							idCandTmp = idCand(o,1);
%
%							idSeqH_EA = idEA(idCandTmp,1);
%							idSeqT_EA = idEA(idCandTmp,1)+Combo-1;
%							NeuIdEA = seqdata(idSeqH_EA:idSeqT_EA,2);
%							IsiEA = diff(seqdata(idSeqH_EA:idSeqT_EA,1));
%							vecEA = [NeuIdEA; IsiEA];
%
%							if sum(vecSA==vecEA)==size(vecSA,1)
%								idPareSA = idSA2(n,1);
%								idPareEA = idEA2(idCandTmp,1);
%								cent = cent + 1;
%								if cent~=1
%									%[vecSA vecEA]
%									disp('Conflict!')
%								end
%								seqdata(idSeqH_SA:idSeqT_SA,5) = n;
%								seqdata(idSeqH_EA:idSeqT_EA,5) = n;
%								seqdata_length(idPareSA,3) = n;
%								seqdata_length(idPareEA,3) = n;
%
%								IsiHtoH = [IsiHtoH;seqdata(idSeqH_EA,1)-seqdata(idSeqH_SA,1)];
%							end
%						end
%					end
					%IsiHtoH(1) = [];
					%figure
					%hist(IsiHtoH,50)
					%title(sprintf('%s-%s-%s-Cmp=%s-Trial=%s',strEnv{i},strData{j},strTest{k},strCmp{l},strTrl{m}))

					save_dir = sprintf('%s/mod-code-longstim02-%s/data%d/data-test0%d',data_dir,strEnv{i},j,k);
					dlmwrite(sprintf('%s/sequences%s-c%s_rev',save_dir,strTrl{m},strCmp{l}),seqdata,' ')
					fprintf('For loop have finished until trial %d\n',m);
				end %for m : trial
				fprintf('For loop have finished until cmp=%d\n',l);
			end %for l : comprassion ratio
			fprintf('For loop have finished until test0%d\n',k);
		end %for k : data-test
		fprintf('For loop have finished until data%d\n',j);
	end %for j : data
	fprintf('For loop have finished until simu env%d\n',i);
end	%for i : simulation environment
